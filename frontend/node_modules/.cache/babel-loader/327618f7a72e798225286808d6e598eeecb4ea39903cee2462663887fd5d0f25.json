{"ast":null,"code":"function make_prediction(training, test) {\n  const x_train = training.map(record => record['incomes']);\n  console.log(x_train);\n  const y_train = training.map(record => record['expenses']);\n  console.log(y_train);\n  const [intercept, slope] = coefficient(x_train, y_train);\n  // console.log(intercept);\n  // console.log(slope)\n  //const x_test = test.map((record) => record['total savings accumulated over time']);\n  const y_pred = intercept + test * slope;\n  console.log('the predicted val is ' + y_pred.toFixed(2));\n  return y_pred;\n}\nconst coefficient = (x, y) => {\n  const x_mean = mean(x);\n  const y_mean = mean(y);\n  const x_variance = variance(x, x_mean); //x-mean\n  const co_variance = covariance(x, x_mean, y, y_mean);\n  console.log(co_variance);\n  var slope = co_variance / x_variance;\n  var intercept = y_mean - slope * x_mean;\n  console.log(slope);\n  console.log(intercept);\n  return [intercept, slope];\n};\nconst mean = X => {\n  var sum = 0;\n  for (var i = 0; i < X.length; i++) {\n    sum += X[i];\n  }\n  return sum / X.length;\n};\nconst variance = (X, m) => {\n  var variance = [];\n  for (var i = 0; i < X.length; i++) {\n    variance += (X[i] - m) ** 2;\n  }\n  return mean(variance);\n};\nconst covariance = (x, m1, y, m2) => {\n  var result = [];\n  var mul = 1;\n  for (var i = 0; i < x.length; i++) {\n    mul = (x[i] - m1) * (y[i] - m2);\n    result += mul;\n  }\n  return mean(result);\n};\nmake_prediction();\n// const linear_regression = new LineaRegression();\nexport default make_prediction();","map":{"version":3,"names":["make_prediction","training","test","x_train","map","record","console","log","y_train","intercept","slope","coefficient","y_pred","toFixed","x","y","x_mean","mean","y_mean","x_variance","variance","co_variance","covariance","X","sum","i","length","m","m1","m2","result","mul"],"sources":["C:/Users/kusum/Documents/7thsemester/expense_tracker/expense-tracker_fullstack/frontend/src/Algorithm/linear_regression.js"],"sourcesContent":["function make_prediction(training, test) {\r\n    const x_train = training.map((record) => record['incomes']);\r\n    console.log(x_train);\r\n    const y_train = training.map((record) => record['expenses']);\r\n    console.log(y_train);\r\n\r\n    const [intercept, slope] = coefficient(x_train, y_train);\r\n    // console.log(intercept);\r\n    // console.log(slope)\r\n    //const x_test = test.map((record) => record['total savings accumulated over time']);\r\n    const y_pred = (intercept + test * slope);\r\n    console.log('the predicted val is ' + y_pred.toFixed(2));\r\n\r\n    return y_pred;\r\n}\r\n\r\nconst coefficient = (x, y) => {\r\n    const x_mean = mean(x);\r\n    const y_mean = mean(y);\r\n    const x_variance = variance(x, x_mean);     //x-mean\r\n    const co_variance = covariance(x, x_mean, y, y_mean);\r\n    console.log(co_variance)\r\n\r\n    var slope = co_variance / x_variance;\r\n    var intercept = y_mean - slope * x_mean;\r\n    console.log(slope)\r\n    console.log(intercept)\r\n\r\n    return [intercept, slope];\r\n\r\n}\r\n\r\nconst mean = (X) => {\r\n    var sum = 0;\r\n    for (var i = 0; i < X.length; i++) {\r\n        sum += X[i];\r\n    }\r\n    return (sum / X.length);\r\n}\r\nconst variance = (X, m) => {\r\n    var variance = [];\r\n    for (var i = 0; i < X.length; i++) {\r\n        variance += (X[i] - m) ** 2;\r\n    }\r\n\r\n    return mean(variance);\r\n}\r\n\r\nconst covariance = (x, m1, y, m2) => {\r\n    var result = [];\r\nvar mul = 1;\r\n    for (var i = 0; i < x.length; i++) {\r\n        mul = (x[i] - m1) * (y[i] - m2)\r\n        result += mul;\r\n    }\r\n\r\n    return mean(result);\r\n}\r\n\r\nmake_prediction()\r\n// const linear_regression = new LineaRegression();\r\nexport default make_prediction();"],"mappings":"AAAA,SAASA,eAAe,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACrC,MAAMC,OAAO,GAAGF,QAAQ,CAACG,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAAC,SAAS,CAAC,CAAC;EAC3DC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;EACpB,MAAMK,OAAO,GAAGP,QAAQ,CAACG,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAAC,UAAU,CAAC,CAAC;EAC5DC,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;EAEpB,MAAM,CAACC,SAAS,EAAEC,KAAK,CAAC,GAAGC,WAAW,CAACR,OAAO,EAAEK,OAAO,CAAC;EACxD;EACA;EACA;EACA,MAAMI,MAAM,GAAIH,SAAS,GAAGP,IAAI,GAAGQ,KAAM;EACzCJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAGK,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;EAExD,OAAOD,MAAM;AACjB;AAEA,MAAMD,WAAW,GAAG,CAACG,CAAC,EAAEC,CAAC,KAAK;EAC1B,MAAMC,MAAM,GAAGC,IAAI,CAACH,CAAC,CAAC;EACtB,MAAMI,MAAM,GAAGD,IAAI,CAACF,CAAC,CAAC;EACtB,MAAMI,UAAU,GAAGC,QAAQ,CAACN,CAAC,EAAEE,MAAM,CAAC,CAAC,CAAK;EAC5C,MAAMK,WAAW,GAAGC,UAAU,CAACR,CAAC,EAAEE,MAAM,EAAED,CAAC,EAAEG,MAAM,CAAC;EACpDZ,OAAO,CAACC,GAAG,CAACc,WAAW,CAAC;EAExB,IAAIX,KAAK,GAAGW,WAAW,GAAGF,UAAU;EACpC,IAAIV,SAAS,GAAGS,MAAM,GAAGR,KAAK,GAAGM,MAAM;EACvCV,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EAClBJ,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;EAEtB,OAAO,CAACA,SAAS,EAAEC,KAAK,CAAC;AAE7B,CAAC;AAED,MAAMO,IAAI,GAAIM,CAAC,IAAK;EAChB,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/BD,GAAG,IAAID,CAAC,CAACE,CAAC,CAAC;EACf;EACA,OAAQD,GAAG,GAAGD,CAAC,CAACG,MAAM;AAC1B,CAAC;AACD,MAAMN,QAAQ,GAAG,CAACG,CAAC,EAAEI,CAAC,KAAK;EACvB,IAAIP,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/BL,QAAQ,IAAI,CAACG,CAAC,CAACE,CAAC,CAAC,GAAGE,CAAC,KAAK,CAAC;EAC/B;EAEA,OAAOV,IAAI,CAACG,QAAQ,CAAC;AACzB,CAAC;AAED,MAAME,UAAU,GAAG,CAACR,CAAC,EAAEc,EAAE,EAAEb,CAAC,EAAEc,EAAE,KAAK;EACjC,IAAIC,MAAM,GAAG,EAAE;EACnB,IAAIC,GAAG,GAAG,CAAC;EACP,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,CAAC,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/BM,GAAG,GAAG,CAACjB,CAAC,CAACW,CAAC,CAAC,GAAGG,EAAE,KAAKb,CAAC,CAACU,CAAC,CAAC,GAAGI,EAAE,CAAC;IAC/BC,MAAM,IAAIC,GAAG;EACjB;EAEA,OAAOd,IAAI,CAACa,MAAM,CAAC;AACvB,CAAC;AAED9B,eAAe,EAAE;AACjB;AACA,eAAeA,eAAe,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}